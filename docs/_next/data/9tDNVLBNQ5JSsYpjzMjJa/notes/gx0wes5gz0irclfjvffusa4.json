{"pageProps":{"note":{"id":"gx0wes5gz0irclfjvffusa4","title":"Computer Architecture","desc":"","updated":1665119578094,"created":1663750024466,"custom":{},"fname":"computer-architecture","type":"note","vault":{"fsPath":".","selfContained":true,"name":"exam-notes"},"contentHash":"9505b71d5397c1397a774a8500a9bc90","links":[],"anchors":{"syllabus":{"type":"header","text":"Syllabus","value":"syllabus","line":8,"column":0,"depth":2},"digital-logic-circuits--components-":{"type":"header","text":"Digital Logic Circuits & Components :","value":"digital-logic-circuits--components-","line":10,"column":0,"depth":3},"data-representation-":{"type":"header","text":"Data Representation :","value":"data-representation-","line":26,"column":0,"depth":3},"register-transfer-and-micro-operations-":{"type":"header","text":"Register Transfer and Micro operations :","value":"register-transfer-and-micro-operations-","line":35,"column":0,"depth":3},"basic-computer-organization-and-design":{"type":"header","text":"Basic Computer Organization and Design:","value":"basic-computer-organization-and-design","line":41,"column":0,"depth":3},"programming-the-basic-computer-":{"type":"header","text":"Programming the Basic Computer :","value":"programming-the-basic-computer-","line":50,"column":0,"depth":3},"microprogrammed-control":{"type":"header","text":"Microprogrammed Control:","value":"microprogrammed-control","line":59,"column":0,"depth":3},"central-processing-unit":{"type":"header","text":"Central Processing Unit:","value":"central-processing-unit","line":65,"column":0,"depth":3},"pipeline-and-vector-processing":{"type":"header","text":"Pipeline and Vector Processing:","value":"pipeline-and-vector-processing","line":74,"column":0,"depth":3},"input-output-organization":{"type":"header","text":"Input-Output Organization:","value":"input-output-organization","line":82,"column":0,"depth":3},"memory-hierarchy":{"type":"header","text":"Memory Hierarchy:","value":"memory-hierarchy","line":92,"column":0,"depth":3},"multiprocessors":{"type":"header","text":"Multiprocessors:","value":"multiprocessors","line":101,"column":0,"depth":3},"conversion-formulas":{"type":"header","text":"Conversion Formulas","value":"conversion-formulas","line":118,"column":0,"depth":1},"binary-to-octal--vice-versa-":{"type":"header","text":"Binary to Octal & vice versa :","value":"binary-to-octal--vice-versa-","line":125,"column":0,"depth":2},"example-2--56-to-binary-":{"type":"header","text":"example 2 : 56 to binary .","value":"example-2--56-to-binary-","line":188,"column":0,"depth":3},"binary-to-hexadecimal--vice-versa-":{"type":"header","text":"Binary to Hexadecimal & vice versa :","value":"binary-to-hexadecimal--vice-versa-","line":194,"column":0,"depth":2},"logic-gate":{"type":"header","text":"Logic Gate","value":"logic-gate","line":248,"column":0,"depth":1},"basic-gates":{"type":"header","text":"Basic GATES","value":"basic-gates","line":253,"column":0,"depth":2},"and":{"type":"header","text":"AND","value":"and","line":255,"column":0,"depth":3},"or":{"type":"header","text":"OR","value":"or","line":266,"column":0,"depth":3},"not":{"type":"header","text":"NOT","value":"not","line":270,"column":0,"depth":3},"universal-gates":{"type":"header","text":"Universal GATES","value":"universal-gates","line":276,"column":0,"depth":2},"nand":{"type":"header","text":"NAND","value":"nand","line":280,"column":0,"depth":3},"nor":{"type":"header","text":"NOR","value":"nor","line":291,"column":0,"depth":3},"arithmetic-gates":{"type":"header","text":"Arithmetic GATES","value":"arithmetic-gates","line":295,"column":0,"depth":2},"xor":{"type":"header","text":"XOR","value":"xor","line":297,"column":0,"depth":3},"x-nor":{"type":"header","text":"X-NOR","value":"x-nor","line":301,"column":0,"depth":3},"truth-table":{"type":"header","text":"Truth Table","value":"truth-table","line":305,"column":0,"depth":2},"implement-all-gates-using-nand--nor-gate":{"type":"header","text":"Implement all Gates using NAND & NOR Gate","value":"implement-all-gates-using-nand--nor-gate","line":318,"column":0,"depth":1},"boolean-algebra":{"type":"header","text":"Boolean Algebra","value":"boolean-algebra","line":340,"column":0,"depth":1},"1-commutative-law":{"type":"header","text":"1. Commutative Law","value":"1-commutative-law","line":344,"column":0,"depth":4},"2-associative-law":{"type":"header","text":"2. Associative Law","value":"2-associative-law","line":349,"column":0,"depth":4},"3-distributive-law":{"type":"header","text":"3. Distributive Law","value":"3-distributive-law","line":354,"column":0,"depth":4},"binary-addition":{"type":"header","text":"Binary Addition","value":"binary-addition","line":359,"column":0,"depth":4},"binary-subtraction":{"type":"header","text":"Binary Subtraction","value":"binary-subtraction","line":371,"column":0,"depth":4},"de-morgans-theorem":{"type":"header","text":"De Morgans Theorem","value":"de-morgans-theorem","line":389,"column":0,"depth":4},"rules-of-boolean-algebra":{"type":"header","text":"Rules of boolean algebra","value":"rules-of-boolean-algebra","line":396,"column":0,"depth":4}},"children":[],"parent":"gjr379x4uby1klukcwuuafc","data":{}},"body":"<h1 id=\"computer-architecture\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#computer-architecture\"></a>Computer Architecture</h1>\n<h2 id=\"syllabus\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#syllabus\"></a>Syllabus</h2>\n<h3 id=\"digital-logic-circuits--components-\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#digital-logic-circuits--components-\"></a>Digital Logic Circuits &#x26; Components :</h3>\n<ul>\n<li>Digital Computers</li>\n<li>Logic Gates</li>\n<li>Boolean ALgebra</li>\n<li>Map Simplifications</li>\n<li>Combinational Circuits</li>\n<li>Flip-Flops</li>\n<li>Sequential Circuits</li>\n<li>Integrated Circuits</li>\n<li>Decoders</li>\n<li>Multiplexers</li>\n<li>Registers</li>\n<li>Counters</li>\n<li>Memory Unit</li>\n</ul>\n<h3 id=\"data-representation-\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-representation-\"></a>Data Representation :</h3>\n<ul>\n<li>Data Types,</li>\n<li>Number Systems and Conversion Complements,</li>\n<li>Fixed Point Representation,</li>\n<li>Floating-Point Representation,</li>\n<li>Error Detection Codes,</li>\n<li>Computer Arithmetic â€“ Addition, Subtraction, Multiplication and Division Algorithms.</li>\n</ul>\n<h3 id=\"register-transfer-and-micro-operations-\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#register-transfer-and-micro-operations-\"></a>Register Transfer and Micro operations :</h3>\n<ul>\n<li>Register Transfer Language,</li>\n<li>Bus and Memory Transfers,</li>\n<li>Arithmetic, Logic and Shift Micro operations</li>\n</ul>\n<h3 id=\"basic-computer-organization-and-design\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#basic-computer-organization-and-design\"></a>Basic Computer Organization and Design:</h3>\n<ul>\n<li>Stored Program Organization and Instruction Codes,</li>\n<li>Computer Registers,</li>\n<li>Computer Instructions, Timing and Control,</li>\n<li>Instruction Cycle,</li>\n<li>Memory-Reference Instructions,</li>\n<li>Input-Output, Interrupt.</li>\n</ul>\n<h3 id=\"programming-the-basic-computer-\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#programming-the-basic-computer-\"></a>Programming the Basic Computer :</h3>\n<ul>\n<li>Machine Language,</li>\n<li>Assembly Language,</li>\n<li>Assembler,</li>\n<li>Program Loops,</li>\n<li>Subroutines,</li>\n<li>Input-Output Programming.</li>\n</ul>\n<h3 id=\"microprogrammed-control\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#microprogrammed-control\"></a>Microprogrammed Control:</h3>\n<ul>\n<li>Control Memory,</li>\n<li>Address Sequencing,</li>\n<li>Design of Control Unit.</li>\n</ul>\n<h3 id=\"central-processing-unit\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#central-processing-unit\"></a>Central Processing Unit:</h3>\n<ul>\n<li>General Register Organization,</li>\n<li>Stack Organization,</li>\n<li>Instruction Formats,</li>\n<li>Addressing Modes,</li>\n<li>RISC Computer,</li>\n<li>CISC Computer.</li>\n</ul>\n<h3 id=\"pipeline-and-vector-processing\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pipeline-and-vector-processing\"></a>Pipeline and Vector Processing:</h3>\n<ul>\n<li>Parallel Processing,</li>\n<li>Pipelining,</li>\n<li>Arithmetic Pipeline,</li>\n<li>Instruction Pipeline,</li>\n<li>Vector Processing Array Processors.</li>\n</ul>\n<h3 id=\"input-output-organization\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#input-output-organization\"></a>Input-Output Organization:</h3>\n<ul>\n<li>Peripheral Devices,</li>\n<li>Input-Output Interface,</li>\n<li>Asynchronous Data Transfer,</li>\n<li>Modes of Transfer,</li>\n<li>Priority Interrupt,</li>\n<li>DMA,</li>\n<li>Serial Communication.</li>\n</ul>\n<h3 id=\"memory-hierarchy\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#memory-hierarchy\"></a>Memory Hierarchy:</h3>\n<ul>\n<li>Main Memory,</li>\n<li>Auxillary Memory,</li>\n<li>Associative Memory,</li>\n<li>Cache Memory,</li>\n<li>Virtual Memory,</li>\n<li>Memory Management Hardware.</li>\n</ul>\n<h3 id=\"multiprocessors\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#multiprocessors\"></a>Multiprocessors:</h3>\n<ul>\n<li>Characteristics of Multiprocessors,</li>\n<li>Interconnection Structures,</li>\n<li>Interprocessor Arbitration,</li>\n<li>Interprocessor Communication and Synchronization,</li>\n<li>Cache Coherence,</li>\n<li>Multicore Processors.</li>\n</ul>\n<hr>\n<ol>\n<li>Decimal (0-9) Base 10</li>\n<li>Binary 0,1 Base 2</li>\n<li>Octal 0-7 Base 8</li>\n<li>Hexadecimal 0-9,A-F\nUse this <a href=\"https://youtu.be/NY2gz_Kzc0Q\">video</a> as a reference.</li>\n</ol>\n<h1 id=\"conversion-formulas\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conversion-formulas\"></a>Conversion Formulas</h1>\n<ul>\n<li>Binary <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></li>\n<li>Octal <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span></li>\n<li>Hex <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></span></li>\n<li>Dec 2<sup>10</sup></li>\n</ul>\n<h2 id=\"binary-to-octal--vice-versa-\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binary-to-octal--vice-versa-\"></a>Binary to Octal &#x26; vice versa :</h2>\n<p>Since Octal is 2<sup>3</sup> therefore the table will have 3 columns. Also Since octal means 8 therefore half of 8 is 4 &#x26; that means in the 1st column 1st 4 digits would be 0. In the 2nd column 1st 2 digits (half of 4) would be 0. In the 3rd Column 1st 1 digit(half of 2) would be 0.</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Octal</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>2</td><td>0</td><td>1</td><td>0</td></tr><tr><td>3</td><td>0</td><td>1</td><td>1</td></tr><tr><td>4</td><td>1</td><td>0</td><td>0</td></tr><tr><td>5</td><td>1</td><td>0</td><td>1</td></tr><tr><td>6</td><td>1</td><td>1</td><td>0</td></tr><tr><td>7</td><td>1</td><td>1</td><td>1</td></tr></tbody></table></div>\n<p><strong>Binary to Octal</strong> : Select the 3 digits from ==right to left== (left of decimal point) &#x26; ==left to right== (right of decimal point) &#x26; convert it to octal one by one.</p>\n<p>Example 1 : (1010)<sub>2</sub> to Octal.</p>\n<ol>\n<li>last 3 digits of 1010 , is 010. Now from the table <strong>010 is 2</strong>.</li>\n<li>Now only one digit 1 is remaining. To convert it I will add 2 more 0s in left of 1 to make it 3digit , 001. Now 001 is 1.</li>\n<li>So the octal is (12)<sub>8</sub> since we are going from right to left.</li>\n</ol>\n<p>Example 2 : (110010110.10101)<sub>2</sub> to octal.</p>\n<ol>\n<li>First lets convert digits left of decimal point</li>\n<li>last 3 digits 110 is 6.</li>\n<li>then 010 is 2.</li>\n<li>then 110 is 6.</li>\n<li>Now lets convert digits right of decimal point</li>\n<li>first 3 digits 101 is 5.</li>\n<li>next 01 remains , let's make it 3 digits by adding 0 at the end. Now it is 010 which is 2.</li>\n<li>So the octal number is (626.52)<sub>8</sub></li>\n</ol>\n<p>Shortcuts :\nBinary : 11101101 to octal. The trick is to take 3 digits from right to left 1by1 &#x26; compare them with this table &#x26; add the digits .</p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-18-26.png\"></p>\n<p>Select the last 3 digits 101 &#x26; its octal is 4+1 = 5. Similiarly 101 will be 5 &#x26; the remaining 11 , I will add 0 in the start &#x26; 011 will be 2+1 = 3. So the octal is 355.</p>\n<p><strong>Octal to Binary</strong> : Select digits one by one from right to left &#x26; convert them to binary.\nExample 1: (67)<sub>8</sub> to Binary</p>\n<ol>\n<li>7 is 111</li>\n<li>6 is 110</li>\n<li>67 is (110111)<sub>2</sub></li>\n</ol>\n<p>Example 2 : (67.62)<sub>8</sub> to Binary</p>\n<ol>\n<li>First convert digits on left of decimal\n<ol>\n<li>7 is 111</li>\n<li>6 is 110</li>\n</ol>\n</li>\n<li>Then convert digits right of decimal\n<ol>\n<li>6 is 110</li>\n<li>2 is 010</li>\n</ol>\n</li>\n<li>Then the binary is (110111.110010)<sub>2</sub></li>\n</ol>\n<p><em>Shortcuts</em> :\nexample 1: 24 to binary. The trick is to take 1 digit from right to left 1by1 &#x26; compare them with this table &#x26; write the digits . 4 is 100 &#x26; 2 is 10 but we will ad 0 in start to make it 3 digit. Therefore the binary is 010100</p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-19-19.png\"></p>\n<h3 id=\"example-2--56-to-binary-\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#example-2--56-to-binary-\"></a>example 2 : 56 to binary .</h3>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-20-04.png\"></p>\n<p>Note : Octal numbers are from 0 to 7 so we can covert them with this formula way to easily.</p>\n<h2 id=\"binary-to-hexadecimal--vice-versa-\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binary-to-hexadecimal--vice-versa-\"></a>Binary to Hexadecimal &#x26; vice versa :</h2>\n<p>Since Hexadecimal is 2<sup>4</sup> therefore the table will have 4 columns. Also Since hexadecimal means 16 therefore half of 16 is 8 &#x26; that means in the 1st column 1st 8 digits would be 0. In the 2nd column 1st 4 digits (half of 8) would be 0. In the 3rd Column 1st 1 digit(half of 2) would be 0.</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th>Hexa</th><th>decimal</th><th>to</th><th>Binary</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>2</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>3</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>4</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>5</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>6</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>7</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>8</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>9</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>A</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>B</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>C</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>D</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>E</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>F</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table></div>\n<p><strong>Binary to Hexadecimal</strong> : Select 4 digits from right to left &#x26; convert them to hexadecimal.</p>\n<p>Example 1 : (11010110)<sub>2</sub> to Hexadecimal</p>\n<ol>\n<li>last 4 digits are 0110 , hexa is 6.</li>\n<li>next 4 digits is D</li>\n<li>so the hexa is (D6)<sub>16</sub></li>\n</ol>\n<p>Example 2 : (11010110.1101)<sub>2</sub> to hexa</p>\n<ol>\n<li>first convert digits before decimal point. It is D6</li>\n<li>digits after decimal is D</li>\n<li>the final hexa is (D6.D)<sub>16</sub></li>\n</ol>\n<p><strong>Hexadecimal to Binary</strong> : Select Digits 1 by 1 from right to left &#x26; convert to binary from above table.</p>\n<p>Example 1 : (EF2) to binary</p>\n<ol>\n<li>2 is 0010</li>\n<li>F is 1111</li>\n<li>E is 1110</li>\n<li>111011110010 is binary of EF2</li>\n</ol>\n<p><em>Shortcuts</em> :\nSimiliar process like octal shortcut</p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-21-02.png\">\n<img src=\"/exam-notes/assets/images/2022-09-21-14-21-17.png\"></p>\n<hr>\n<h1 id=\"logic-gate\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#logic-gate\"></a>Logic Gate</h1>\n<pre><code>0 means Low / False\n1 means High / True\n</code></pre>\n<h2 id=\"basic-gates\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#basic-gates\"></a>Basic GATES</h2>\n<h3 id=\"and\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#and\"></a>AND</h3>\n<p>This GATE returns 1 only if both the inputs are 1 otherwise 0. If 1 of the input is 0 then the output will be 0. The symbol of AND gate is <code>.</code> , <code>&#x26;</code> , <code>^</code></p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>A</th><th>B</th><th>Y = A.B</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table></div>\n<h3 id=\"or\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#or\"></a>OR</h3>\n<p>This GATE returns 1 if one of the input is 1 then output will be 1. It will return 0 only if both the inputs are 0. The symbol to represent OR Gate is <code>+</code></p>\n<h3 id=\"not\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#not\"></a>NOT</h3>\n<p>This GATE takes <strong>Single</strong> Input &#x26; returns <strong>Single</strong> Output. Whatever the input is output willbe exact opposite. Example : input 0 then output 1, input 1 then output 0.</p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-23-13.png\"></p>\n<h2 id=\"universal-gates\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#universal-gates\"></a>Universal GATES</h2>\n<p>A universal gate is a gate which can implement any Boolean function without need to use any other gate type.</p>\n<h3 id=\"nand\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#nand\"></a>NAND</h3>\n<p>Whatever the output of AND is just opposite of that. Example below (here Y' repesents Output of NAND Gate):</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>A</th><th>B</th><th>Y = A.B</th><th>Y'</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>0</td></tr></tbody></table></div>\n<h3 id=\"nor\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#nor\"></a>NOR</h3>\n<p>Whatever the output of OR is just opposite of that.</p>\n<h2 id=\"arithmetic-gates\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#arithmetic-gates\"></a>Arithmetic GATES</h2>\n<h3 id=\"xor\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#xor\"></a>XOR</h3>\n<p>Ex OR Means Exclusive OR . The eqn of XOR is <code>A . B' + A' . B</code> . If Inputs aresame tehno output is 0 otehrwise 1.</p>\n<h3 id=\"x-nor\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#x-nor\"></a>X-NOR</h3>\n<p>Means Exclusive NOR . The eqn of XOR is <code>A . B + A' . B'</code></p>\n<h2 id=\"truth-table\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#truth-table\"></a>Truth Table</h2>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>A</th><th>B</th><th>AND (A.B)</th><th>OR (A+B)</th><th>NAND</th><th>NOR</th><th>XOR</th><th>X-NOR</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr></tbody></table></div>\n<p>...</p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-25-23.png\"></p>\n<h1 id=\"implement-all-gates-using-nand--nor-gate\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#implement-all-gates-using-nand--nor-gate\"></a>Implement all Gates using NAND &#x26; NOR Gate</h1>\n<p>Building different gates using The NAND or NOR Gates. A simple Table from this <a href=\"https://www.youtube.com/watch?v=w2hK0JVKmJc\">video</a> which states that how many NAND &#x26; NOR Gates are required to create the other mentioned gates.</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Gates</th><th>NAND</th><th>NOR</th></tr></thead><tbody><tr><td>NOT</td><td>1</td><td>1</td></tr><tr><td>AND</td><td>2</td><td>3</td></tr><tr><td>OR</td><td>3</td><td>2</td></tr><tr><td>XOR</td><td>4</td><td>5</td></tr><tr><td>XNOR</td><td>5</td><td>4</td></tr></tbody></table></div>\n<p>To create a NOT Gate Only 1 NAND / NOR gate is required, only 1 input is given.</p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-26-11.png\"></p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-27-07.png\"></p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-27-29.png\"></p>\n<p><img src=\"/exam-notes/assets/images/2022-09-24-11-09-56.png\"></p>\n<h1 id=\"boolean-algebra\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#boolean-algebra\"></a>Boolean Algebra</h1>\n<p><a href=\"https://www.youtube.com/watch?v=A2yWB_Zgutk&#x26;list=PLUhebcqFf6aEm07MOovpDrXcyxfNNZgGi&#x26;index=6\">Binary Arithmetic Video</a></p>\n<h4 id=\"1-commutative-law\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-commutative-law\"></a>1. Commutative Law</h4>\n<p>A + B = B + A\nA.B = B.A</p>\n<h4 id=\"2-associative-law\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-associative-law\"></a>2. Associative Law</h4>\n<p>A + (B + C) = (A + B) + C\nA.(B.C) = (A.B).C</p>\n<h4 id=\"3-distributive-law\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3-distributive-law\"></a>3. Distributive Law</h4>\n<p>A.(B + C) = A.B + A.C\nA + (B . C) = (A+B) . (A+C)</p>\n<h4 id=\"binary-addition\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binary-addition\"></a>Binary Addition</h4>\n<pre><code>0 + 0 = 1\n1 + 0 = 1\n1 + 1 = 10\n</code></pre>\n<p>Example : 1010 + 0111</p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-30-37.png\"></p>\n<h4 id=\"binary-subtraction\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binary-subtraction\"></a>Binary Subtraction</h4>\n<pre><code>0 - 0 = 0\n1 - 0 = 1\n1 - 1 = 0\n</code></pre>\n<p>0 - 1 = In this case 0 becomes 10 &#x26; the previous column if 1 becomes 0. We borrow 1 from a nearby column.</p>\n<p>Example 1 :</p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-31-12.png\"></p>\n<p>Example 2 :</p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-31-46.png\"></p>\n<h4 id=\"de-morgans-theorem\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#de-morgans-theorem\"></a>De Morgans Theorem</h4>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-32-14.png\"></p>\n<p>The above bar means complement(')\nExample : (X+Y)' = X' . Y'</p>\n<h4 id=\"rules-of-boolean-algebra\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rules-of-boolean-algebra\"></a>Rules of boolean algebra</h4>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-32-40.png\"></p>\n<p>This <a href=\"https://youtu.be/Jmtl4kkP_WA?t=3264\">video</a> has important rules explaination.</p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-33-03.png\"></p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-33-27.png\"></p>\n<p><img src=\"/exam-notes/assets/images/2022-09-21-14-33-54.png\"></p>","noteIndex":{"id":"gjr379x4uby1klukcwuuafc","title":"Root","desc":"","updated":1664424403234,"created":1663740327223,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"exam-notes"},"contentHash":"57c801f96fa00329063b52177f8e4b08","links":[],"anchors":{"notes-taken-by-abhik-b-for-competitive-exams":{"type":"header","text":"Notes taken by Abhik B for competitive exams","value":"notes-taken-by-abhik-b-for-competitive-exams","line":8,"column":0,"depth":1}},"children":["keojisysn3fz8lxhbdfcna4","nx2wuyeo5kgob0u4jucsers","gx0wes5gz0irclfjvffusa4","u8o7ksndu0na9g910fuglx5","teaqsmbxeubw47kp104doko","4t4frfo11yj7dr8558kdhr1"],"parent":null,"data":{},"body":"\n# Notes taken by Abhik B for competitive exams\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"exam-notes"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"assetsPrefix":"/exam-notes","siteUrl":"https://abhik-b.github.io","siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Abhik B's Exam Notes","description":"Notes taken while studying computer applications"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"siteFaviconPath":"favicon.ico","siteIndex":"root","searchMode":"lookup"}}},"__N_SSG":true}