{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"\n# Notes taken by Abhik B for competitive exams\n","n":0.333}}},{"i":2,"$":{"0":{"v":"Computer Architecture","n":0.707},"1":{"v":"\n1. Decimal (0-9) Base 10\n2. Binary 0,1 Base 2\n3. Octal 0-7 Base 8\n4. Hexadecimal 0-9,A-F\n   Use this [video](https://youtu.be/NY2gz_Kzc0Q) as a reference.\n\n# Conversion Formulas\n\n- Binary $2^1$\n- Octal $2^3$\n- Hex $2^4$\n- Dec 2<sup>10</sup>\n\n## Binary to Octal & vice versa :\n\nSince Octal is 2<sup>3</sup> therefore the table will have 3 columns. Also Since octal means 8 therefore half of 8 is 4 & that means in the 1st column 1st 4 digits would be 0. In the 2nd column 1st 2 digits (half of 4) would be 0. In the 3rd Column 1st 1 digit(half of 2) would be 0.\n\n| Octal |     |     |     |\n| ----- | --- | --- | --- |\n| 0     | 0   | 0   | 0   |\n| 1     | 0   | 0   | 1   |\n| 2     | 0   | 1   | 0   |\n| 3     | 0   | 1   | 1   |\n| 4     | 1   | 0   | 0   |\n| 5     | 1   | 0   | 1   |\n| 6     | 1   | 1   | 0   |\n| 7     | 1   | 1   | 1   |\n\n**Binary to Octal** : Select the 3 digits from ==right to left== (left of decimal point) & ==left to right== (right of decimal point) & convert it to octal one by one.\n\nExample 1 : (1010)<sub>2</sub> to Octal.\n\n1. last 3 digits of 1010 , is 010. Now from the table **010 is 2**.\n2. Now only one digit 1 is remaining. To convert it I will add 2 more 0s in left of 1 to make it 3digit , 001. Now 001 is 1.\n3. So the octal is (12)<sub>8</sub> since we are going from right to left.\n\nExample 2 : (110010110.10101)<sub>2</sub> to octal.\n\n1. First lets convert digits left of decimal point\n2. last 3 digits 110 is 6.\n3. then 010 is 2.\n4. then 110 is 6.\n5. Now lets convert digits right of decimal point\n6. first 3 digits 101 is 5.\n7. next 01 remains , let's make it 3 digits by adding 0 at the end. Now it is 010 which is 2.\n8. So the octal number is (626.52)<sub>8</sub>\n\nShortcuts :\nBinary : 11101101 to octal. The trick is to take 3 digits from right to left 1by1 & compare them with this table & add the digits .\n\n![](/assets/images/2022-09-21-14-18-26.png)\n\nSelect the last 3 digits 101 & its octal is 4+1 = 5. Similiarly 101 will be 5 & the remaining 11 , I will add 0 in the start & 011 will be 2+1 = 3. So the octal is 355.\n\n**Octal to Binary** : Select digits one by one from right to left & convert them to binary.\nExample 1: (67)<sub>8</sub> to Binary\n\n1. 7 is 111\n2. 6 is 110\n3. 67 is (110111)<sub>2</sub>\n\nExample 2 : (67.62)<sub>8</sub> to Binary\n\n1. First convert digits on left of decimal\n   1. 7 is 111\n   2. 6 is 110\n2. Then convert digits right of decimal\n   1. 6 is 110\n   2. 2 is 010\n3. Then the binary is (110111.110010)<sub>2</sub>\n\n_Shortcuts_ :\nexample 1: 24 to binary. The trick is to take 1 digit from right to left 1by1 & compare them with this table & write the digits . 4 is 100 & 2 is 10 but we will ad 0 in start to make it 3 digit. Therefore the binary is 010100\n\n![](/assets/images/2022-09-21-14-19-19.png)\n\n### example 2 : 56 to binary .\n\n![](/assets/images/2022-09-21-14-20-04.png)\n\nNote : Octal numbers are from 0 to 7 so we can covert them with this formula way to easily.\n\n## Binary to Hexadecimal & vice versa :\n\nSince Hexadecimal is 2<sup>4</sup> therefore the table will have 4 columns. Also Since hexadecimal means 16 therefore half of 16 is 8 & that means in the 1st column 1st 8 digits would be 0. In the 2nd column 1st 4 digits (half of 8) would be 0. In the 3rd Column 1st 1 digit(half of 2) would be 0.\n\n|     | Hexa | decimal | to  | Binary |\n| --- | ---- | ------- | --- | ------ |\n| 0   | 0    | 0       | 0   | 0      |\n| 1   | 0    | 0       | 0   | 1      |\n| 2   | 0    | 0       | 1   | 0      |\n| 3   | 0    | 0       | 1   | 1      |\n| 4   | 0    | 1       | 0   | 0      |\n| 5   | 0    | 1       | 0   | 1      |\n| 6   | 0    | 1       | 1   | 0      |\n| 7   | 0    | 1       | 1   | 1      |\n| 8   | 1    | 0       | 0   | 0      |\n| 9   | 1    | 0       | 0   | 1      |\n| A   | 1    | 0       | 1   | 0      |\n| B   | 1    | 0       | 1   | 1      |\n| C   | 1    | 1       | 0   | 0      |\n| D   | 1    | 1       | 0   | 1      |\n| E   | 1    | 1       | 1   | 0      |\n| F   | 1    | 1       | 1   | 1      |\n\n**Binary to Hexadecimal** : Select 4 digits from right to left & convert them to hexadecimal.\n\nExample 1 : (11010110)<sub>2</sub> to Hexadecimal\n\n1. last 4 digits are 0110 , hexa is 6.\n2. next 4 digits is D\n3. so the hexa is (D6)<sub>16</sub>\n\nExample 2 : (11010110.1101)<sub>2</sub> to hexa\n\n1. first convert digits before decimal point. It is D6\n2. digits after decimal is D\n3. the final hexa is (D6.D)<sub>16</sub>\n\n**Hexadecimal to Binary** : Select Digits 1 by 1 from right to left & convert to binary from above table.\n\nExample 1 : (EF2) to binary\n\n1. 2 is 0010\n2. F is 1111\n3. E is 1110\n4. 111011110010 is binary of EF2\n\n_Shortcuts_ :\nSimiliar process like octal shortcut\n\n![](/assets/images/2022-09-21-14-21-02.png)\n![](/assets/images/2022-09-21-14-21-17.png)\n\n---\n\n# Logic Gate\n\n    0 means Low / False\n    1 means High / True\n\n## Basic GATES\n\n### AND\n\nThis GATE returns 1 only if both the inputs are 1 otherwise 0. If 1 of the input is 0 then the output will be 0. The symbol of AND gate is `.` , `&` , `^`\n\n| A   | B   | Y = A.B |\n| --- | --- | ------- |\n| 0   | 0   | 0       |\n| 0   | 1   | 0       |\n| 1   | 0   | 0       |\n| 1   | 1   | 1       |\n\n### OR\n\nThis GATE returns 1 if one of the input is 1 then output will be 1. It will return 0 only if both the inputs are 0. The symbol to represent OR Gate is `+`\n\n### NOT\n\nThis GATE takes **Single** Input & returns **Single** Output. Whatever the input is output willbe exact opposite. Example : input 0 then output 1, input 1 then output 0.\n\n![](/assets/images/2022-09-21-14-23-13.png)\n\n## Universal GATES\n\nA universal gate is a gate which can implement any Boolean function without need to use any other gate type.\n\n### NAND\n\nWhatever the output of AND is just opposite of that. Example below (here Y' repesents Output of NAND Gate):\n\n| A   | B   | Y = A.B | Y'  |\n| --- | --- | ------- | --- |\n| 0   | 0   | 0       | 1   |\n| 0   | 1   | 0       | 1   |\n| 1   | 0   | 0       | 1   |\n| 1   | 1   | 1       | 0   |\n\n### NOR\n\nWhatever the output of OR is just opposite of that.\n\n## Arithmetic GATES\n\n### XOR\n\nEx OR Means Exclusive OR . The eqn of XOR is `A . B' + A' . B` . If Inputs aresame tehno output is 0 otehrwise 1.\n\n### X-NOR\n\nMeans Exclusive NOR . The eqn of XOR is `A . B + A' . B'`\n\n## Truth Table\n\n| A   | B   | AND (A.B) | OR (A+B) | NAND | NOR | XOR | X-NOR |\n| --- | --- | --------- | -------- | ---- | --- | --- | ----- |\n| 0   | 0   | 0         | 0        | 1    | 1   | 0   | 1     |\n| 0   | 1   | 0         | 1        | 1    | 0   | 1   | 0     |\n| 1   | 0   | 0         | 1        | 1    | 0   | 1   | 0     |\n| 1   | 1   | 1         | 1        | 0    | 0   | 0   | 1     |\n\n...\n\n![](/assets/images/2022-09-21-14-25-23.png)\n\n# Implement all Gates using NAND & NOR Gate\n\nBuilding different gates using The NAND or NOR Gates. A simple Table from this [video](https://www.youtube.com/watch?v=w2hK0JVKmJc) which states that how many NAND & NOR Gates are required to create the other mentioned gates.\n\n| Gates | NAND | NOR |\n| ----- | ---- | --- |\n| NOT   | 1    | 1   |\n| AND   | 2    | 3   |\n| OR    | 3    | 2   |\n| XOR   | 4    | 5   |\n| XNOR  | 5    | 4   |\n\nTo create a NOT Gate Only 1 NAND / NOR gate is required, only 1 input is given.\n\n![](/assets/images/2022-09-21-14-26-11.png)\n\n![](/assets/images/2022-09-21-14-27-07.png)\n\n![](/assets/images/2022-09-21-14-27-29.png)\n\n![](/assets/images/2022-09-21-14-28-34.png)\n\n---\n\n# Boolean Algebra\n\n[Binary Arithmetic Video](https://www.youtube.com/watch?v=A2yWB_Zgutk&list=PLUhebcqFf6aEm07MOovpDrXcyxfNNZgGi&index=6)\n\n#### 1. Commutative Law\n\nA + B = B + A\nA.B = B.A\n\n#### 2. Associative Law\n\nA + (B + C) = (A + B) + C\nA.(B.C) = (A.B).C\n\n#### 3. Distributive Law\n\nA.(B + C) = A.B + A.C\nA + (B . C) = (A+B) . (A+C)\n\n#### Binary Addition\n\n```\n0 + 0 = 1\n1 + 0 = 1\n1 + 1 = 10\n```\n\nExample : 1010 + 0111\n\n![](/assets/images/2022-09-21-14-30-37.png)\n\n#### Binary Subtraction\n\n```\n0 - 0 = 0\n1 - 0 = 1\n1 - 1 = 0\n```\n\n0 - 1 = In this case 0 becomes 10 & the previous column if 1 becomes 0. We borrow 1 from a nearby column.\n\nExample 1 :\n\n![](/assets/images/2022-09-21-14-31-12.png)\n\nExample 2 :\n\n![](/assets/images/2022-09-21-14-31-46.png)\n\n#### De Morgans Theorem\n\n![](/assets/images/2022-09-21-14-32-14.png)\n\nThe above bar means complement(')\nExample : (X+Y)' = X' . Y'\n\n#### Rules of boolean algebra\n\n![](/assets/images/2022-09-21-14-32-40.png)\n\nThis [video](https://youtu.be/Jmtl4kkP_WA?t=3264) has important rules explaination.\n\n![](/assets/images/2022-09-21-14-33-03.png)\n\n![](/assets/images/2022-09-21-14-33-27.png)\n\n![](/assets/images/2022-09-21-14-33-54.png)\n","n":0.026}}},{"i":3,"$":{"0":{"v":"Cloud Computing","n":0.707},"1":{"v":"\n**Cloud computing** is the on-demand availability of computer system resources, especially data storage (cloud storage) and computing power, without direct active management by the user. It is a _pay-per-use_ model.\n\n**Virtualization** or virtualisation (sometimes abbreviated `v12n`, a numeronym) is the act of creating a *virtual* (rather than actual) version of something at the same abstraction level, including virtual computer hardware platforms, storage devices, and computer network resources.\nVirtual processing shares the cloud providers :\n\n- Processing Hardware\n- Disk & Storage\n- Memory\n- Networking\n- Desktop\n\n**Hypervisor** (also known as a _virtual machine monitor, VMM, or virtualizer_) is a type of computer software, firmware or hardware that creates and runs virtual machines. There are 2 types of hypervisor :\n\nType 1 - runs directly on the hardware. This hypervisor also provides the OS.  \nType 2 - hypervisor is managed by the OS like any other application\n\n![types of hypervisor](/assets/images/20220917075011-1.png)\nA distributed system is a system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another. The components interact with one another in order to achieve a common goal. Three significant characteristics of distributed systems are: concurrency of components, lack of a global clock, and independent failure of components. Examples of distributed systems vary from SOA-based systems to massively multiplayer online games to peer-to-peer applications.\n\nA computer program that runs within a distributed system is called a distributed program (and distributed programming is the process of writing such programs). There are many different types of implementations for the message passing mechanism, including pure HTTP, RPC-like connectors and message queues.\n\n## NIST\n\nNational Institute of Standards & Technology\n\n- Platform as a service or [[#PAAS]]\n- Software as a service or [[#SAAS]]\n\n### Service Attributes\n\n1. On Demand Self Service - consumers can unilaterally provision computing capabilities as needed automatically without requiring human interaction with each service provider.\n2. Broad Network Access - capabilities are available over the network and accessed through standard mechanism that promote use by heterogeneous thin or thick client platforms.\n3. Resource Pooling - The provider’s computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to consumer demand\n4. Rapid Elasticity - capabilities can be elastically provisioned and released to scale rapidly outward and inward commensurate with demand.\n5. Measured Service - cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service.\n\n## Service Models\n\n![types of service models](/assets/images/20220914103824.png)\n\n### IAAS\n\nInfrastructure as a service (IaaS) is a type of cloud computing service that offers essential stuff on a pay-as-you-go basis :\n\n- compute,\n- storage, and\n- networking resources on demand\n\nIt offers virtual servers, desktops,security & networking. IAAS makes it possible for smaller firms to have same infrastructure as any large firm.\nCommon use cases : Developement & testing Environments. Developing & Testing in a environment that emulates production is best scenario for quality.\n\n### PAAS\n\n### SAAS\n\n## Cloud Cube Model\n\nHas 4 dimensions :\n\n- _Physical Location of data_ : Internal/External\n- _OwnerShip_ : Proprietary / Open\n- _Security Range_ : DePerimeterized / Perimeterized\n- _Dimension_ : Insourced/Outsourced\n\nRead more from [here](https://data-flair.training/blogs/cloud-cube-model/)\n\n## Deployment Models\n\n- Community\n- Hybrid\n- Private\n- Public\n\nSo I am adding this changes\n","n":0.044}}},{"i":4,"$":{"0":{"v":"Artificial Intelligence (AI)","n":0.577},"1":{"v":"\nMachine Learning is a iterative process.\n\n**Supervised Learning** :\nThere is a direct relationship between input variable & output variable. Check the drawing below to understand more :\n![](/assets/images/2022-09-21-14-39-10.png)\n\n**Supervised learning** problems can be classified into :\n\n- _regression problem_ : Data itself is predicted. Example :House price prediction\n\n- _classification problem_ : Category is predicted by the data. Example : if we upload an image of an animal then whether that animal is cat or non cat .\n\n**_Anomaly detection algorithm_** : Identify unusal data points. Example : Unusal traffic or strange patterns in network that can indicate network is hacked.\n\n**_Clustering algorithm_** : Groups data based on similiar conditions. Example : what types of customer buys a certain product\n\n**Overfitting Data** : When model tries to use all attributes (even the least important ones) due to excess knowledge of attributes training set score is increasing (or error is decreasing) while testing set score is decreasing (or error is increasing)\n\n**Underfitting Data** : model doesn't has enough knowledge and gives results which have very less connections/harmony among each other , due to lack of enough attributes.\n\n## Linear Algebra , Regression & Classification\n\nScalar,Vector,Matrix,Matrix Operations,Norms,Probaility,Joint Distribution,Bayes theorem , Expectation, COvariance.\n\nVector dot product = each row \\* each column\n\n## Linear Regression\n\n---\n\nRead this to learn more about [Why Virtual Environments](https://realpython.com/python-virtual-environments-a-primer/#why-do-you-need-virtual-environments)\n\n### What is PyTorch Tensor ??\n\nA Pytorch Tensor is just a generic **n-dimensional array** to be used for arbitrary numeric computation. It can run on either CPU or GPU.\nRead this article to learn more : [Tensors in PyTorch](https://www.geeksforgeeks.org/tensors-in-pytorch/)\n\n### Batch Sizes\n\nFor example I have 1000 samples of data for training & I set batch_size = 10 then first 10 data samples (i.e from 1 to 10 ) will be used to train. Then again next 10 data samples (i.e from 11 to 20) will be used to train. Simliarly all 100 datat samples will be trained by training 10 samples at once.\nGradient descent is an optimization algorithm used to find the values of parameters (coefficients) of a function (f) that minimizes a cost function (cost). Gradient descent is best used when the parameters cannot be calculated analytically (e.g. using linear algebra) and must be searched for by an optimization algorithm.\n\n### In the neural network terminology:\n\n- _one epoch_ = one forward pass and one backward pass of all the training examples\n- _batch size_ = the number of training examples in one forward/backward pass. The higher the batch size, the more memory space you'll need.\n- _number of iterations_ = number of passes, each pass using batch size as number of examples. To be clear, one pass = one forward pass + one backward pass (we do not count the forward pass and backward pass as two different passes).\n\nExample: if you have 1000 training examples, and your batch size is 500, then it will take 2 iterations to complete 1 epoch.\n\n### Shuffles\n\nFor Example ,We want our neural net to recognize each number from the hand drawings & we are using a dataset that has all handdrawn numbers form 0 to 9 to train the net. Now if we took a neural net & fed through a bunch of 0s 1st then the neural net will say all are 0s , then when we fed 1s then the neural net will say all are 1s & when we reach 9s then it will end saying all are 9s. Now it will only recognize 9s but not the previous numbers but we want the net to recognize each number. Shuffling will make sure it learns all the numbers by trying to learn all numbers together.\n\n### Layers (Hand Drawn Numbers training)\n\nWe are trying to have 3 hidden layers of 64 neurons. First layer will have Input of `28*28` (image size) & out put will be 64.Then next 2 layers will have 64 as both input & output sizes. Then the last layer will have input of 64 but output will be 10 . The 2nd , 3rd ,4th layer's input is 64 because the prev layer outputs 64 & this 64 then gets inputted to this layer.The 4th layer outputs 10 beacuse hand drawn numbers have 0 to 9 numbers (10 numbers in total) so 10 classes will be outputted.\n\n![](/assets/images/2022-09-21-14-41-30.png)\n\n### Feed Forward\n\nIn the prev section we created some layers now we need a path to take data from each layer to another. A feedforward neural network (FNN) is an artificial neural network wherein connections between the nodes do not form a cycle. The feedforward neural network was the first and simplest type of artificial neural network devised.\n\n![](/assets/images/2022-09-21-14-41-51.png)\n\n![](/assets/images/2022-09-21-14-42-07.png)\n\nX will be passed to each layer however our model wont learn much because data wont be scaled properly. Scaled properly means data is transformed such that the features are within a specific range e.g. [0, 1]. For proper data scaling we need [activation functions](https://towardsdatascience.com/activation-functions-neural-networks-1cbd9f8d91d6). So here we will use ReLU activation. Activation Functions work on output of layers. So for the 1st 3 layers we will use ReLU Activation Functions but for the 4th layer we will use something else.\n4th layer has 10 neurons (0-9 numbers) so we want to optimize the output so that 1 neuron is fully fired than the other 9. For that we will use softmax.\n\n![](/assets/images/2022-09-21-14-43-00.png)\n\nNotice that in the above image I have a forward method. This forward is called when Net Model is called (in line : `output=net(X)` ) . When you call the model directly this Forward is called , the internal  `__call__`  function is used. This function manages all registered hooks and calls forward afterwards. That’s also the reason you should call the model directly, because otherwise your hooks might not work etc.\n\n### Training Model\n\nLoss & optimizer are needed to make sure the model is nearly accurate. Loss means how wrong the model is. Optimizer makes sure the loss is reduced slowly over time based on the learning rate.\n\nWhen we pass data through the neural network , it incurs a loss. Now it is entirely calculable to get weights to make loss zero. If we do that then our model might. So we use learning rate to opimize to lower the loss but only take certain size steps to opimize(not gigantic steps because then the optimization might stuck).\n\n![](/assets/images/2022-09-21-14-43-36.png)\n\n### Neural net from scratch\n\nLet A0 be the input layer, Z1 & Z2 be the unactivated hidden layer. We will get the dot product of W1 and A0. W1 is bunch of weights that correspond to each of the 7840 connections. b1 is a constant bias term added to each of the 10 nodes. Then we will add activation functions to Z1.\nWithout applying activation function each node in the 1st layer would be _a linear combination of nodes before it + bias term_ . Then the second layer will be a linear combo of 1st layer & finally the output layer will be linear combo of 2nd layer which is a linear combo of 1st layer which is linear combo of input layer. This is just a fancy linear regression & will not become a smart learner. For more info [read this](https://qr.ae/pvOVWB)\n\n![](/assets/images/2022-09-21-14-44-02.png)\n\nWe will use Rectified Linear Unit. A1 is the ==output== of ReLU applied on Z1. Then in similiar fashion we will get Z2 which is the second layer of hidden layers. However we will use Softmax activation function on Z2 to get the output layer (A2) .\n\n![](/assets/images/2022-09-21-14-44-34.png)\n","n":0.029}}}]}
